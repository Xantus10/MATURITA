/auth routes
  /idtoken
    POST - Provide an idToken to log in / register
         - Params
           - idtoken: string	// Microsoft Id token
         - Response
           - 200: Valid ID token
           - 401: ID token did not pass validation


/posts routes
  /
    GET - Retrieve a list of 10 posts
        - Params
          - begin: number		// Skip first x posts
          - orderBy: 'date' | 'price'	// Posts ordered by most recent or lowest price
          - filterSubjects: string[]	// All subjects tags of shown posts (logical OR) (When no filter, specify ALL)
          - filterYears: number[]	// All year tags of shown posts (logical OR) (When no filter, specify ALL)
          - filterState: string[]	// All state tags of shown posts (logical OR) (When no filter, specify ALL)
          - *priceMin: number		// Lower end of price range
          - *priceMax: number		// Upper end of price range
        - Response
          - 200: OK
          - 400: A required field is missing
          - 401: Invalid credentials

   POST - Make a new post
        - Params
          - title: string		// Title of the post
          - remove: number		// Number of days to remove after
          - subjects: string[]		// Subject tags
          - state: string		// State of the book
          - years: number[]		// Years the book is used in
          - priceMin: number		// Lower end of price range
          - *priceMax: number		// Upper end of price range (if unspecified, static price is assumed)
        - Response
          - 201: OK (post created)
          - 400: A required field is missing
          - 401: Invalid credentials
          - 403: Unauthorized		// Admin cannot create posts (Separation of privilege)

 DELETE - Delete a post (user only his own, admin anyones)
        - Params
          - postId: string		// String representation of posts._id
        - Response
          - 200: OK (post deleted)
          - 401: Invalid credentials
          - 403: Unauthorized
          - 404: The post does not exist

  /extend
   POST - Extend a posts lifetime
        - Params
          - postId: string		// String representation of posts._id
          - days: number		// Number of days to add to the posts lifespan
        - Response
          - 200: OK (post deleted)
          - 401: Invalid credentials
          - 403: Unauthorized		// Admin cannot extend posts (Separation of privilege)
          - 404: The post does not exist

  /user
    GET - Get posts of the logged in user
        - Params
          - *userId: string		// Id of the user (will use the logged in user if unspecified)
        - Response
          - 200: OK
          - 401: Invalid credentials
          - 403: Unauthorized		// If userId is specified, the user must be admin
          - 404: The user does not exist


/users routes
  /list
    GET - Get list of users
        - Params
          - *first: string		// The beginning of the first name
          - *last: string		// The beginning of the last name
        - Response
          - 200: OK
          - 401: Invalid credentials
          - 403: Unauthorized		// The user must be admin

  /:id
    GET - Get info about the specified user
        - Response
          - 200: OK
          - 400: Id is in incorrect format
          - 401: Invalid credentials
          - 404: The user does not exist